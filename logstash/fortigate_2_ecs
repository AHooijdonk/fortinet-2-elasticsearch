input {
    pipeline {
        address => "fortigate_2_ecs"
    }

}

filter {

#remove event.original for saving disk space
    #mutate{ remove_field => ["[event][original]"]  }

#validea "N/A" on ip fields
    ##  traffic ###dstip, srcip, tranip, transip
    if [dstip]=="N/A" { mutate { remove_field => ["dstip"] } }
    if [srcip]=="N/A" { mutate { remove_field => ["srcip"] } }
    if [tranip]=="N/A" { mutate { remove_field => ["tranip"] } }
    if [transip]=="N/A" { mutate { remove_field => ["transip"] } }
    ###  utm   ####botnetip, dstip*, locip, remip, srcip*, trueclntip
    if [botnetip]=="N/A" { mutate { remove_field => ["botnetip"] } }
    if [locip]=="N/A" { mutate { remove_field => ["locip"] } }
    if [remip]=="N/A"{ mutate { remove_field => ["remip"] }}
    if [trueclntip]=="N/A" { mutate { remove_field => ["trueclntip"] } }
    ### event  ####assigned ,assignip ,ddnsserver ,dstip* ,gateway ,ip ,local ,locip ,nat ,remip ,remote ,srcip* ,tunnelip
    if [assigned]=="N/A" { mutate { remove_field => ["assigned"] } }
    if [assignip]=="N/A"  { mutate { remove_field => ["assignip"] } }
    if [ddnsserver]=="N/A" { mutate { remove_field => ["ddnsserver"] } } 
    if [gateway]=="N/A" { mutate { remove_field => ["gateway"] } }
    if [ip]=="N/A" { mutate { remove_field => ["ip"] } }
    if [local]=="N/A" { mutate { remove_field => ["local"] } }
    if [locip]=="N/A" { mutate { remove_field => ["locip"] } }
    if [nat]=="N/A" { mutate { remove_field => ["nat"] } }
    if [remip]=="N/A" { mutate { remove_field => ["remip"] } }
    if [remote]=="N/A"{ mutate { remove_field => ["remote"] } }
    if [tunnelip]=="N/A" { mutate { remove_field => ["tunnelip"] } }

#rename fortios fields that overlap with ECS.    
    mutate {
        rename => { "[agent]" => "[fortios][agent]" }
        rename => { "[error]" => "[fortios][error]" }
        rename => { "[file]" => "[fortios][file]" }
        rename => { "[group]" => "[fortios][group]" }
        rename => { "[hash]" => "[fortios][hash]" }
        rename => { "[host]" => "[fortios][host]" }
        rename => { "[log]" => "[fortios][log]" }
        rename => { "[process]" => "[fortios][process]" }
        rename => { "[server]" => "[fortios][server]" }
        rename => { "[service]" => "[fortios][service]" }
        rename => { "[url]" => "[fortios][url]" }
        rename => { "[user]" => "[fortios][user]" }
    }

#ecs translation
    mutate {
        add_field => { "[ecs][version]" => "1.2.0" }
        rename => {"syslog5424_pri" => "[log][syslog][priority]"}
    }

    if [type] == "traffic" {
        mutate {
            copy => { "[action]" => "[event][outcome]" }
            copy => { "[duration]" => "[event][duration]" }
            copy => { "[logid]" => "[event][code]" }
            copy => { "[sessionid]" => "[network][session_id]" }
            copy => { "[subtype]" => "[event][action]" }
            copy => { "[type]" => "[event][category]" }
            copy => { "[app]" => "[network][application]" }
            copy => { "[comment]" => "[rule][description]" }
            copy => { "[policyid]" => "[rule][id]" }
            copy => { "[policyname]" => "[rule][name]" }
            copy => { "[devid]" => "[observer][serial_number]" }
            copy => { "[devname]" => "[observer][name]" }
            copy => { "[msg]" => "[message]" }
            copy => { "[proto]" => "[network][iana_number]" }
            copy => { "[fortios][service]" => "[network][protocol]" }
            copy => { "[fortios][url]" => "[url][path]" }
        }
        
        mutate {
            copy => { "[collectedemail]" => "[client][user][email]" }
            copy => { "[fortios][group]" => "[client][user][group][name]" }
            copy => { "[sentbyte]" => "[client][bytes]" }
            copy => { "[sentpkt]" => "[client][packets]" }
            copy => { "[srcip]" => "[client][ip]" }
            copy => { "[srcmac]" => "[client][mac]" }
            copy => { "[srcport]" => "[client][port]" }
            copy => { "[transip]" => "[client][nat][ip]" }
            copy => { "[transport]" => "[client][nat][port]" }
            copy => { "[unauthuser]" => "[client][user][name]" }
            copy => { "[fortios][user]" => "[client][user][name]" }
            copy => { "[dstcollectedemail]" => "[server][user][email]" }
            copy => { "[dstip]" => "[server][ip]" }
            copy => { "[dstmac]" => "[server][mac]" }
            copy => { "[dstname]" => "[server][address]" }
            copy => { "[dstport]" => "[server][port]" }
            copy => { "[dstunauthuser]" => "[server][user][name]" }
            copy => { "[rcvdbyte]" => "[server][bytes]" }
            copy => { "[rcvdpkt]" => "[server][packets]" }
            copy => { "[tranip]" => "[server][nat][ip]" }
            copy => { "[tranport]" => "[server][nat][port]" }
        }

        mutate {
            copy => { "[collectedemail]" => "[source][user][email]" }
            copy => { "[fortios][group]" => "[source][user][group][name]" }
            copy => { "[sentbyte]" => "[source][bytes]" }
            copy => { "[sentpkt]" => "[source][packets]" }
            copy => { "[srcip]" => "[source][ip]" }
            copy => { "[srcmac]" => "[source][mac]" }
            copy => { "[srcport]" => "[source][port]" }
            copy => { "[transip]" => "[source][nat][ip]" }
            copy => { "[transport]" => "[source][nat][port]" }
            copy => { "[fortios][user]" => "[source][user][name]" }
            copy => { "[unauthuser]" => "[source][user][name]" }
            copy => { "[dstcollectedemail]" => "[destination][user][email]" }
            copy => { "[dstip]" => "[destination][ip]" }
            copy => { "[dstmac]" => "[destination][mac]" }
            copy => { "[dstname]" => "[destination][address]" }
            copy => { "[dstport]" => "[destination][port]" }
            copy => { "[dstunauthuser]" => "[destination][user][name]" }
            copy => { "[rcvdbyte]" => "[destination][bytes]" }
            copy => { "[rcvdpkt]" => "[destination][packets]" }
            copy => { "[tranip]" => "[destination][nat][ip]" }
            copy => { "[tranport]" => "[destination][nat][port]" }
        }

        
    }
    # type=dns for version 6.0 and below. On 6.2, dns is subtype of utm
    else if [type] == "dns" {
        mutate {
            copy =>{ "[action]" => "[event][outcome]" }
            copy =>{ "[dstip]" => "[destination][ip]" }
            copy =>{ "[dstport]" => "[destination][port]" }
            copy =>{ "[fortios][error]" => "[error][message]" }
            copy =>{ "[fortios][group]" => "[source][user][group][name]" }
            copy =>{ "[logid]" => "[event][code]" }
            copy =>{ "[msg]" => "[message]" }
            copy =>{ "[policyid]" => "[rule][id]" }
            copy =>{ "[proto]" => "[network][iana_number]" }
            copy =>{ "[qclass]" => "[dns][question][class]" }
            copy =>{ "[qname]" => "[dns][question][name]" }
            copy =>{ "[qtype]" => "[dns][question][type]" }
            copy =>{ "[srcip]" => "[source][ip]" }
            copy =>{ "[srcmac]" => "[source][mac]" }
            copy =>{ "[srcport]" => "[source][port]" }
            copy =>{ "[subtype]" => "[event][action]" }
            copy =>{ "[type]" => "[event][category]" }
            copy =>{ "[fortios][user]" => "[source][user][name]" }
        }
        mutate {
            copy =>{ "[unauthuser]" => "[source][user][name]" }
        }
    } 
    else if [type] == "utm" {
        mutate {
            copy =>{ "[rcvdbyte]" => "[destination][bytes]" }
            copy =>{ "[dstip]" => "[destination][ip]" }
            copy =>{ "[dst_port]" => "[destination][port]" }
            copy =>{ "[fortios][error]" => "[error][message]" }
            copy =>{ "[subtype]" => "[event][category]" }
            copy =>{ "[logid]" => "[event][code]" }
            copy =>{ "[eventtype]" => "[event][action]" }
            copy =>{ "[type]" => "[event][dataset]" }
            copy =>{ "[duration]" => "[event][duration]" }
            copy =>{ "[action]" => "[event][outcome]" }
            copy =>{ "[session_id]" => "[network][session_id]" }
            copy =>{ "[filetype]" => "[file][extension]" }
            copy =>{ "[filename]" => "[file][name]" }
            copy =>{ "[filesize]" => "[file][size]" }
            copy =>{ "[msg]" => "[message]" }
            copy =>{ "[app]" => "[network][application]" }
            copy =>{ "[dir]" => "[network][direction]" }
            copy =>{ "[proto]" => "[network][iana_number]" }
            copy =>{ "[fortios][service]" => "[network][protocol]" }
            copy =>{ "[devid]" => "[observer][serial_number]" }
            copy =>{ "[policy_id]" => "[rule][id]" }
            copy =>{ "[policytype]" => "[rule][type]" }
            copy =>{ "[sentbyte]" => "[source][bytes]" }
            copy =>{ "[locip]" => "[source][ip]" }
            copy =>{ "[locport]" => "[source][port]" }
            copy =>{ "[unauthuser]" => "[source][user][name]" }
            copy =>{ "[hostname]" => "[url][domain]" }
            copy =>{ "[fortios][url]" => "[url][path]" }
            copy =>{ "[qclass]" => "[dns][question][class]" }
            copy =>{ "[qname]" => "[dns][question][name]" }
            copy =>{ "[qtype]" => "[dns][question][type]" }
        }
        mutate {
            copy =>{ "[remip]" => "[destination][ip]" }
            copy =>{ "[remport]" => "[destination][port]" }
            copy =>{ "[sessionid]" => "[network][session_id]" }
            copy =>{ "[direction]" => "[network][direction]" }
            copy =>{ "[policyid]" => "[rule][id]" }
            copy =>{ "[srcip]" => "[source][ip]" }
            copy =>{ "[src_port]" => "[source][port]" }
            copy =>{ "[fortios][user]" => "[source][user][name]" }
        }
        mutate {
            copy =>{ "[dstport]" => "[destination][port]" }
            copy =>{ "[srcport]" => "[source][port]" }
        }
    }    
    else if [type] == "event" {}


    #### event.start ############################################################################
    if [eventtime] {
        date {
            match => [ "eventtime", "UNIX" ]
            timezone => "%{[event][timezone]}"
            target => "[event][start]"
        }
    }

    #### ecs best practices
    if [source][ip] { mutate { add_field => { "[related][ip]" => "%{[source][ip]}" }    }    }
    if [destination][ip] { mutate { add_field => { "[related][ip]" => "%{[destination][ip]}" }    }    }
    
    if ([source][bytes] and [destination][bytes]) and !([network][bytes]){
        ruby {
            code => "event.set('[network][bytes]', event.get('[source][bytes]').to_i + event.get('[destination][bytes]').to_i )"
        }
    }

    if ([source][packets] and [destination][packets]) and !([network][packets]){
        ruby {
            code => "event.set('[network][packets]', event.get('[source][packets]').to_i + event.get('[destination][packets]').to_i )"
        }
    }

    ##### Source.address###########################################################################

    if [source][user][name] {
        mutate { add_field => { "[source][address]" => "%{[source][user][name]}" }    }    
    }
    else {
        mutate { add_field => { "[source][address]" => "%{[source][ip]}" }    }    
    }
    
    
}

output {
    
    pipeline {
        send_to => "geo_enrichment"
    }


}
